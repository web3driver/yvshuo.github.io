<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>香辣猪蹄儿</title>
  <subtitle>认认真真写代码，开开心心吃猪蹄。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yvshuo.github.io/"/>
  <updated>2017-01-17T15:52:28.000Z</updated>
  <id>http://yvshuo.github.io/</id>
  
  <author>
    <name>yvshuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重构—重新组织函数</title>
    <link href="http://yvshuo.github.io/2017/01/16/2017-01-16-refactor/"/>
    <id>http://yvshuo.github.io/2017/01/16/2017-01-16-refactor/</id>
    <published>2017-01-16T03:03:47.000Z</published>
    <updated>2017-01-17T15:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次单位人力让挑书，然后选了这本《重构-改善既有代码的设计》这本书，作者Martin Fowler是ThoughtWorks公司的首席科学家。虽然书写于很多年前，但是很多思想在编程中依然非常实用。书里主要是讲的各种重构的手法，但是我觉得看完之后，个人感觉更重要的是告诉自己在写代码的过程中如何从源头上注意一些问题，让自己的代码更合理，更优美。最初选这本书也是因为觉得需要超脱语言的层面去理解一些编程的宏观的一些东西，不然总是觉得自己像个机器一样，写着代码，却不懂怎么写更好，为什么别人都那样分层。书已经看了一遍，似乎明白了一些哪些代码好一些、哪些代码差一点。<br>最近再一边读一边记下这个系列的读书笔记，算是记录吧~</p>
<h2 id="1-代码的坏味道"><a href="#1-代码的坏味道" class="headerlink" title="1. 代码的坏味道"></a>1. 代码的坏味道</h2><ul>
<li>重复代码：如果在两个不相关的类中出现了重复的相同功能的函数，就应该考虑新建一个独立的类将这个重复的函数提炼出去。</li>
<li>过长函数：写代码的过程中，有一个原则。<strong>代码块越小，代码的功能就越容易管理，代码的处理和移动也就越轻松。</strong></li>
<li>过大的类：一个类的代码太多的话，最后就会变成一坨，嗯。尽量将特别大的类进行分解。</li>
<li>过长的参数列:拆成bean。</li>
<li>switch泛滥：作者的建议是少用switch，在使用switch的地方考虑使用多态来解决。</li>
<li>数据泥团：数据成群的绑在一起。正确的做法是将总是绑定在一起的数据放到一个对象里。</li>
<li>发散式变化：多种变化都对应同一个类的修改。这种情况下需要考虑将这个类拆开，尽量每种变化只对应一个类的修改。</li>
<li>霰弹式修改：这个类一旦变化，会引发多个类的修改。这种情况下应该尽量将所有需要修改的方法放到一个类里。</li>
</ul>
<h2 id="2-重新组织函数"><a href="#2-重新组织函数" class="headerlink" title="2. 重新组织函数"></a>2. 重新组织函数</h2><h3 id="2-1-extract-method（提炼函数）"><a href="#2-1-extract-method（提炼函数）" class="headerlink" title="2.1 extract method（提炼函数）"></a>2.1 extract method（提炼函数）</h3><p>1) 没有局部变量，直接提炼。<br>2) 有局部变量，把这个局部变量作为参数传入被提炼函数<br>3) 如果需要对局部变量赋值，得需要使用remove Assignments to parameters.如果被赋值的局部变量只在被提炼的函数中被赋值，则把这个局部变量声明到被提炼函数中。如果被赋值的局部变量需要在被提炼的函数其它的地方使用，则需要被提炼函数返回一个被修改后的值。如果遇到返回的不止一个值，则最好的方法是再重新提炼一个新的方法，每次只返回一个值最佳。</p>
<p><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">(<span class="keyword">double</span> amount)</span></span>&#123;</div><div class="line">    printBanner();</div><div class="line">    <span class="comment">//print details</span></div><div class="line">    System.out.println(<span class="string">"amount:"</span>+amount);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">(<span class="keyword">double</span> amount)</span></span>&#123;</div><div class="line">    printBanner();</div><div class="line">    printDetails(amount);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDetails</span><span class="params">(<span class="keyword">double</span> amount)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"amount:"</span>+amount);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="2-2-inline-method-内联函数"><a href="#2-2-inline-method-内联函数" class="headerlink" title="2.2 inline method(内联函数)"></a>2.2 inline method(内联函数)</h3><p><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (moreThanFiveLateDeliveries()) ? <span class="number">2</span>:<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">moreThanFiveLateDeliveries</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> _numberOfLateDeliveries &gt; <span class="number">5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (_numberOfLateDeliveries &gt; <span class="number">5</span>) ? <span class="number">2</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-3-inline-temp-内联临时变量"><a href="#2-3-inline-temp-内联临时变量" class="headerlink" title="2.3 inline temp(内联临时变量)"></a>2.3 inline temp(内联临时变量)</h3><p><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> basePrice = anOrder.basePrice();</div><div class="line"><span class="keyword">return</span> (basePrice&gt;<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (anOrder.basePrice()&gt;<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<h3 id="2-4-replace-temp-with-query-以查询取代临时变量"><a href="#2-4-replace-temp-with-query-以查询取代临时变量" class="headerlink" title="2.4 replace temp with query(以查询取代临时变量)"></a>2.4 replace temp with query(以查询取代临时变量)</h3><p>临时变量的问题在于：他们是暂时的，而且只能在所属函数内使用。由于临时变量只在所属函数内可见，所以更好的方法是将其替换为一个查询，这样，同一个类中的所有函数都将可以获得这份信息。<br><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> basePrice = _quantity * _itemPrice;</div><div class="line"><span class="keyword">if</span>(basePrice &gt; <span class="number">1000</span>)</div><div class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.95</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.98</span>;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(basePrice() &gt; <span class="number">1000</span>)</div><div class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.95</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.98</span>;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">basePrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> _quantity * _itemPrice;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在进行这项重构的时候有个需要注意的就是得确保这个临时变量是否只被赋值了一次，有个技巧是在这个临时变量前加final修饰符，如果不只被赋值一次，编译器就会报错。这时候就不能使用这个方法。</p>
<h3 id="2-5-introduce-explaining-variable（引入解释型变量）"><a href="#2-5-introduce-explaining-variable（引入解释型变量）" class="headerlink" title="2.5 introduce explaining variable（引入解释型变量）"></a>2.5 introduce explaining variable（引入解释型变量）</h3><p>将复杂表达式放进一个临时变量里，以此变量名称来解释表达式的用途。<br><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</div><div class="line">    (browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</div><div class="line">    resize&gt;<span class="number">0</span> )&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isMacOs = platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isIE = browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> wasResized = resize&gt;<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(isMacOs &amp;&amp; isIE &amp;&amp; wasResized)&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-6-split-temporary-variable（分解临时变量）"><a href="#2-6-split-temporary-variable（分解临时变量）" class="headerlink" title="2.6 split temporary variable（分解临时变量）"></a>2.6 split temporary variable（分解临时变量）</h3><p>程序中有某个临时变量被赋值超过一次，它既不是循环变量，也不被用于收集计算结果。针对每次赋值，创造一个独立、对应的临时变量。<br><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> temp = <span class="number">2</span> * (_height + _width);</div><div class="line">System.out.println(temp);</div><div class="line">temp = _height + _width;</div><div class="line">System.out.println(temp);</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> perimeter = <span class="number">2</span> * (_height + _width);</div><div class="line">System.out.println(perimeter);</div><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> area = _height + _width;</div><div class="line">System.out.println(area);</div></pre></td></tr></table></figure></p>
<p>个人理解就是这种做法可以保证在重构过程中不出错，不会影响其他抽取函数等操作。而且也可以使代码变得清晰明了。</p>
<h3 id="2-7-remove-assignments-to-parameters（移除对参数的赋值）"><a href="#2-7-remove-assignments-to-parameters（移除对参数的赋值）" class="headerlink" title="2.7 remove assignments to parameters（移除对参数的赋值）"></a>2.7 remove assignments to parameters（移除对参数的赋值）</h3><p><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span><span class="params">(<span class="keyword">int</span> inputVal,<span class="keyword">int</span> quantity,<span class="keyword">int</span> yearToDate)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(inputVal &gt; <span class="number">50</span>) inputVal -= <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span><span class="params">(<span class="keyword">int</span> inputVal,<span class="keyword">int</span> quantity,<span class="keyword">int</span> yearToDate)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> result = inputVal;</div><div class="line">	<span class="keyword">if</span>(inputVal &gt; <span class="number">50</span>) result -= <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p>这么做主要是为了避免在某些按引用传递参数的语言中对调用端造成影响。而且这么做的话，代码会清晰很多，而且这种在任何语言中都会表现出相同的语义。<br>譬如下面的例子中，在参数是对象的情况下，对参数赋值就会造成一些让人糊涂的影响：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Date d1 = <span class="keyword">new</span> Date();</div><div class="line">	nextDateUpdate(d1);</div><div class="line">	System.out.println(<span class="string">"d1 after nextday:"</span>+d1);</div><div class="line">	</div><div class="line">	Date d2 = <span class="keyword">new</span> Date();</div><div class="line">	nextDateReplace(d2);</div><div class="line">	System.out.println(<span class="string">"d2 after nextday:"</span>+d2);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nextDateUpdate</span><span class="params">(Date arg)</span></span>&#123;</div><div class="line">	arg.setDate(arg.getDate()+<span class="number">1</span>);<span class="comment">//改变了调用端</span></div><div class="line">	System.out.println(<span class="string">"arg in nextDay update:"</span>+arg);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nextDateReplace</span><span class="params">(Date arg)</span></span>&#123;</div><div class="line">	arg=<span class="keyword">new</span> Date(arg.getYear(),arg.getMonth(),arg.getDate()+<span class="number">1</span>);<span class="comment">//没有改变调用端</span></div><div class="line">	System.out.println(<span class="string">"arg in nextDay replace:"</span>+arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印出来的结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arg <span class="keyword">in</span> nextDay update:Wed Jan 18 10:51:18 CST 2017</div><div class="line">d1 after nextday:Wed Jan 18 10:51:18 CST 2017</div><div class="line">arg <span class="keyword">in</span> nextDay replace:Wed Jan 18 00:00:00 CST 2017</div><div class="line">d2 after nextday:Tue Jan 17 10:51:18 CST 2017</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果代码的语义是按引用传递的，请在调用端检查调用后是否还使用了这个参数。也要检查有多少个按引用传递的参数被赋值后又被使用。请尽量只以return方式返回一个值。如果需要返回的值不止一个，看看可否把需返回的大堆数据变成单一对象，或干脆为每个返回值设计对应的一个独立函数。</p>
</blockquote>
<h3 id="2-8-replace-method-with-method-object（以函数对象取代函数）"><a href="#2-8-replace-method-with-method-object（以函数对象取代函数）" class="headerlink" title="2.8 replace method with method object（以函数对象取代函数）"></a>2.8 replace method with method object（以函数对象取代函数）</h3><blockquote>
<p>只要将相对独立的代码从大型函数中提炼出来，就可以大大提高代码的可读性。但是，局部变量的存在会增加函数分解难度。如果一个函数中局部变量泛滥，分解函数就会变得困难。这时候就要以函数对象取代函数，将所有局部变量都变成函数对象的字段，从而将大型函数拆解变短。<br>这个就不举例子了~很容易理解。</p>
</blockquote>
<h3 id="2-9-substitute-algorithm（替换算法）"><a href="#2-9-substitute-algorithm（替换算法）" class="headerlink" title="2.9 substitute algorithm（替换算法）"></a>2.9 substitute algorithm（替换算法）</h3><p><code>before</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">foundPerson</span><span class="params">(String[] people)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;people.length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(people[i].equals(<span class="string">"Don"</span>))&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"Don"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(people[i].equals(<span class="string">"John"</span>))&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"John"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(people[i].equals(<span class="string">"Kent"</span>))&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"Kent"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>after</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">foundPerson</span><span class="params">(String[] people)</span></span>&#123;</div><div class="line">	List constants = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"Don"</span>,<span class="string">"John"</span>,<span class="string">"Kent"</span>&#125;);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;people.length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(constants.contains(people[i]))&#123;</div><div class="line">			<span class="keyword">return</span> people[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行算法重构的步骤：<br>1)准备好另一个（替换用）的算法，让它通过编译。<br>2)针对现有测试，执行上述的新算法。如果结果与原本结果相同，重构结束。<br>3)如果测试结果不同于原先，在测试和调试过程中，以旧算法为比较参照标准。</p>
<blockquote>
<p>对于每个测试用例，分别以新旧两种算法执行，并观察两者结果是否相同。</p>
</blockquote>
<h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p>这篇主要是对函数中的代码进行整理~都是些基本的重构手法，真正写代码过程中还是要根据实际情况来有针对性的使用。文中有些是我个人的理解，不一定正确。还是要多读书才能深入理解~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次单位人力让挑书，然后选了这本《重构-改善既有代码的设计》这本书，作者Martin Fowler是ThoughtWorks公司的首席科学家。虽然书写于很多年前，但是很多思想在编程中依然非常实用。书里主要是讲的各种重构的手法，但是我觉得看完之后，个人感觉更重要的是告诉自己在写代码的过程中如何从源头上注意一些问题，让自己的代码更合理，更优美。最初选这本书也是因为觉得需要超脱语言的层面去理解一些编程的宏观的一些东西，不然总是觉得自己像个机器一样，写着代码，却不懂怎么写更好，为什么别人都那样分层。书已经看了一遍，似乎明白了一些哪些代码好一些、哪些代码差一点。&lt;br&gt;最近再一边读一边记下这个系列的读书笔记，算是记录吧~&lt;/p&gt;
&lt;h2 id=&quot;1-代码的坏味道&quot;&gt;&lt;a href=&quot;#1-代码的坏味道&quot; class=&quot;headerlink&quot; title=&quot;1. 代码的坏味道&quot;&gt;&lt;/a&gt;1. 代码的坏味道&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重复代码：如果在两个不相关的类中出现了重复的相同功能的函数，就应该考虑新建一个独立的类将这个重复的函数提炼出去。&lt;/li&gt;
&lt;li&gt;过长函数：写代码的过程中，有一个原则。&lt;strong&gt;代码块越小，代码的功能就越容易管理，代码的处理和移动也就越轻松。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;过大的类：一个类的代码太多的话，最后就会变成一坨，嗯。尽量将特别大的类进行分解。&lt;/li&gt;
&lt;li&gt;过长的参数列:拆成bean。&lt;/li&gt;
&lt;li&gt;switch泛滥：作者的建议是少用switch，在使用switch的地方考虑使用多态来解决。&lt;/li&gt;
&lt;li&gt;数据泥团：数据成群的绑在一起。正确的做法是将总是绑定在一起的数据放到一个对象里。&lt;/li&gt;
&lt;li&gt;发散式变化：多种变化都对应同一个类的修改。这种情况下需要考虑将这个类拆开，尽量每种变化只对应一个类的修改。&lt;/li&gt;
&lt;li&gt;霰弹式修改：这个类一旦变化，会引发多个类的修改。这种情况下应该尽量将所有需要修改的方法放到一个类里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-重新组织函数&quot;&gt;&lt;a href=&quot;#2-重新组织函数&quot; class=&quot;headerlink&quot; title=&quot;2. 重新组织函数&quot;&gt;&lt;/a&gt;2. 重新组织函数&lt;/h2&gt;&lt;h3 id=&quot;2-1-extract-method（提炼函数）&quot;&gt;&lt;a href=&quot;#2-1-extract-method（提炼函数）&quot; class=&quot;headerlink&quot; title=&quot;2.1 extract method（提炼函数）&quot;&gt;&lt;/a&gt;2.1 extract method（提炼函数）&lt;/h3&gt;&lt;p&gt;1) 没有局部变量，直接提炼。&lt;br&gt;2) 有局部变量，把这个局部变量作为参数传入被提炼函数&lt;br&gt;3) 如果需要对局部变量赋值，得需要使用remove Assignments to parameters.如果被赋值的局部变量只在被提炼的函数中被赋值，则把这个局部变量声明到被提炼函数中。如果被赋值的局部变量需要在被提炼的函数其它的地方使用，则需要被提炼函数返回一个被修改后的值。如果遇到返回的不止一个值，则最好的方法是再重新提炼一个新的方法，每次只返回一个值最佳。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;before&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printOwing&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; amount)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printBanner();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//print details&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;amount:&quot;&lt;/span&gt;+amount);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;after&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printOwing&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; amount)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printBanner();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printDetails(amount);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printDetails&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; amount)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;amount:&quot;&lt;/span&gt;+amount);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="重构" scheme="http://yvshuo.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>git知识备忘</title>
    <link href="http://yvshuo.github.io/2017/01/11/2017-01-11-review-git/"/>
    <id>http://yvshuo.github.io/2017/01/11/2017-01-11-review-git/</id>
    <published>2017-01-11T12:23:51.000Z</published>
    <updated>2017-01-11T13:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>单位用的svn，一个多月不用git，发现有些命令就忘了- -所以这是一篇git操作备忘。主要内容转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a>。</p>
<h2 id="1-git基本示意"><a href="#1-git基本示意" class="headerlink" title="1. git基本示意"></a>1. git基本示意</h2><p><img src="/assets/images/2017/01/11/1.png" alt="git示意图"></p>
<blockquote>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
</blockquote>
<h2 id="2-常用操作命令"><a href="#2-常用操作命令" class="headerlink" title="2. 常用操作命令"></a>2. 常用操作命令</h2><h3 id="2-1-新建代码库"><a href="#2-1-新建代码库" class="headerlink" title="2.1 新建代码库"></a>2.1 新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">$ git init</div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">$ git init [project-name]</div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ git config --list</div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ git config <span class="_">-e</span> [--global]</div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ git config [--global] user.name <span class="string">"[name]"</span></div><div class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure></p>
<h3 id="2-3-增加-删除文件"><a href="#2-3-增加-删除文件" class="headerlink" title="2.3 增加/删除文件"></a>2.3 增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git add [dir]</div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git add .</div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git add -p</div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h3 id="2-4-代码提交"><a href="#2-4-代码提交" class="headerlink" title="2.4 代码提交"></a>2.4 代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit <span class="_">-a</span></div><div class="line"><span class="comment"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h3 id="2-5-分支"><a href="#2-5-分支" class="headerlink" title="2.5 分支"></a>2.5 分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line">$ git branch</div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line">$ git branch -r</div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line">$ git merge [branch]</div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h3 id="2-6-标签"><a href="#2-6-标签" class="headerlink" title="2.6 标签"></a>2.6 标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git tag</div><div class="line"><span class="comment"># 新建一个tag在当前commit</span></div><div class="line">$ git tag [tag]</div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git tag <span class="_">-d</span> [tag]</div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [tag]</div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h3 id="2-7-查看信息"><a href="#2-7-查看信息" class="headerlink" title="2.7 查看信息"></a>2.7 查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --stat</div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h3 id="2-8-远程同步"><a href="#2-8-远程同步" class="headerlink" title="2.8 远程同步"></a>2.8 远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line">$ git fetch [remote]</div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line">$ git remote -v</div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line">$ git remote show [remote]</div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote] --force</div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h3 id="2-9-撤销"><a href="#2-9-撤销" class="headerlink" title="2.9 撤销"></a>2.9 撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line">$ git checkout [file]</div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line">$ git checkout .</div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line">$ git reset [file]</div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line">$ git reset --hard</div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line">$ git reset [commit]</div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line">$ git revert [commit]</div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h3 id="2-10-其他"><a href="#2-10-其他" class="headerlink" title="2.10 其他"></a>2.10 其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>嗯，看来我是有一段时间没有抽时间好好学习了~最近在读一本讲java重构的书~回头写个读书笔记→_→</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单位用的svn，一个多月不用git，发现有些命令就忘了- -所以这是一篇git操作备忘。主要内容转载自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot;&gt;常用 Git 命令清单&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;1-git基本示意&quot;&gt;&lt;a href=&quot;#1-git基本示意&quot; class=&quot;headerlink&quot; title=&quot;1. git基本示意&quot;&gt;&lt;/a&gt;1. git基本示意&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/images/2017/01/11/1.png&quot; alt=&quot;git示意图&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-常用操作命令&quot;&gt;&lt;a href=&quot;#2-常用操作命令&quot; class=&quot;headerlink&quot; title=&quot;2. 常用操作命令&quot;&gt;&lt;/a&gt;2. 常用操作命令&lt;/h2&gt;&lt;h3 id=&quot;2-1-新建代码库&quot;&gt;&lt;a href=&quot;#2-1-新建代码库&quot; class=&quot;headerlink&quot; title=&quot;2.1 新建代码库&quot;&gt;&lt;/a&gt;2.1 新建代码库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在当前目录新建一个Git代码库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新建一个目录，将其初始化为Git代码库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git init [project-name]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载一个项目和它的整个代码历史&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; [url]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yvshuo.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序初体验（1）</title>
    <link href="http://yvshuo.github.io/2016/11/27/2016-11-27-wxapp/"/>
    <id>http://yvshuo.github.io/2016/11/27/2016-11-27-wxapp/</id>
    <published>2016-11-27T03:03:47.000Z</published>
    <updated>2017-01-02T14:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>p.s. 这篇文章是一个月之前写的，因为最近忙于其他项目，所以一直没来维护这个博客~微信小程序貌似也有了新的更新。先把这篇贴上，后续填坑23333</p>
<p>利用周末时间基于cnode社区的api撸了一发微信小程序，记录一下。</p>
<h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>微信mac版开发工具0.11.112301<br>下载地址：<a href="https://servicewechat.com/wxa-dev-logic/download_redirect?type=darwin&amp;from=mpwiki&amp;t=20161122" target="_blank" rel="external">使劲戳我</a><br>其他版本下载地址：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161122" target="_blank" rel="external">继续戳我</a></p>
<h3 id="2、项目创建"><a href="#2、项目创建" class="headerlink" title="2、项目创建"></a>2、项目创建</h3><p>扫码登录后按下图输入创建项目<br><img src="/assets/images/2016/11/27/1.png" alt=""></p>
<p>创建项目后界面的样子和默认的文件目录结构<br><img src="/assets/images/2016/11/27/2.png" alt=""></p>
<p>分析下目录结构<br><img src="/assets/images/2016/11/27/3.png" alt=""><br><code>pages</code>目录下有两个页面，<code>index</code>和<code>logs</code>。<code>.js</code>文件是负责处理该页面的逻辑，<code>.wxml</code>负责视图以及绑定一些交互事件，<code>.wxss</code>来写css样式，<code>.json</code>用来配置一些配置参数或者定义一些静态常量。<br><code>utils</code>目录下是一个工具类。根目录下的<code>app.js</code>是小程序的入口文件，用来注册app。<code>app.json</code>可以用来配置全局常量，<code>app.wxss</code>用来配置项目的公用样式。</p>
<p>初始程序提供了一个从<code>index</code>页面到<code>logs</code>页面的跳转<br><img src="/assets/images/2016/11/27/4.png" alt=""><br><code>index.wxml</code>中绑定的<code>bindViewTab</code>函数就是前面在<code>index.js</code>中标出的那个函数。函数中调用微信小程序的api定义了一个跳转<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.navigateTo(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'../logs/logs'</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>另外，在<code>logs.js</code>中调用了一下微信的api<code>wx.getStorageSync(KEY)</code>从本地缓存中同步获取指定key对应的内容。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line">onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//调用API从本地缓存中获取数据</span></div><div class="line">  <span class="keyword">var</span> logs = wx.getStorageSync(<span class="string">'logs'</span>) || []</div><div class="line">  logs.unshift(<span class="built_in">Date</span>.now())</div><div class="line">  wx.setStorageSync(<span class="string">'logs'</span>, logs)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在小程序启动的时候就会在本地存储的<code>logs</code>中记录下当前时间，添加到数组的最前面。<br>所以每次重新启动小程序后在<code>logs</code>页面就会加一条数据。<br>重新启动前：<br><img src="/assets/images/2016/11/27/5.png" alt=""><br>重新启动后:<br><img src="/assets/images/2016/11/27/6.png" alt=""></p>
<h3 id="3、组件介绍"><a href="#3、组件介绍" class="headerlink" title="3、组件介绍"></a>3、组件介绍</h3><p>组件就是视图层的基本组成单元，简单的理解就是微信小程序提供的一些标签库，通过使用这些组件，可以快速搭建自带一些微信基本风格的视图。<br>官方说明文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/?t=20161122" target="_blank" rel="external">请大力戳我</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--logs.wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container log-list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;logs&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"log"</span> <span class="attr">wx:key</span>=<span class="string">"*this"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"log-item"</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;. &#123;&#123;log&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面代码中的<code>view</code>标签和<code>text</code>标签就是组件，<code>view</code>是一个视图容器，支持嵌套。<code>text</code>就是一个文本组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span>  <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userInfo.avatarUrl&#125;&#125;"</span> <span class="attr">background-size</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个就是在一个父<code>view</code>中嵌套了两个子<code>view</code>。<br>在<code>logs.wxml</code>中还有一个地方，就是<code>block</code>标签，这个是小程序框架中提供的一个包装元素，它不是一个组件，不会在页面中做任何渲染，只会接受基本的控制属性。</p>
<h3 id="4、API介绍"><a href="#4、API介绍" class="headerlink" title="4、API介绍"></a>4、API介绍</h3><p>小程序的框架提供了很多微信原生的API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。<br>官方文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/?t=20161122" target="_blank" rel="external">不要停，继续戳</a><br>截止到目前，微信小程序提供了7大类API，网络、媒体、数据、位置、设备、界面、开放接口。<br>个人比较感兴趣的就是媒体类的API，提供了大量基于微信原生的丰富功能。看到了一个打开文档的接口<code>wx.openDocument(OBJECT)</code>，感觉可以基于这个接口开发一个管理微信聊天中发布的文档的小应用，然后需要的时候拿出来读~以后就再也不需要翻聊天记录翻来翻去了~因吹思婷！<br>另外界面API也很喜欢，一直以来都非常喜欢微信的UI设计，读了小程序的设计指南之后更是觉得微信的设计团队好厉害。<br>小程序的设计指南：<a href="https://mp.weixin.qq.com/debug/wxadoc/design/index.html?t=20161122" target="_blank" rel="external">戳吧</a><br>至于开放接口的API，个人感觉这块文档还很乱，另外个人开发者好像不能用。学习的时候感觉非常的蛋疼。希望能提供一个供学习的沙盒接口，同时完善下教程。</p>
<h3 id="5、开始撸代码"><a href="#5、开始撸代码" class="headerlink" title="5、开始撸代码"></a>5、开始撸代码</h3><p>首先放上cnode社区的API文档：<a href="https://cnodejs.org/api" target="_blank" rel="external">感谢cnode社区，请戳我</a><br>这里有个微信开发者工具的BUG，开发过程中发现我修改的代码始终处于一种缓存状态，修改的代码没法更新上去。选择了清除文件缓存和数据缓存，包括重启等方法均不行。<br><img src="/assets/images/2016/11/27/7.png" alt=""><br>嗯。。最后发现默认的这个代码热更新有BUG，导致了以上问题。如果还是发现代码不能更新的话，切换下这个选项框的选择状态就可以刷新项目了。</p>
<h4 id="5-1-配置"><a href="#5-1-配置" class="headerlink" title="5.1 配置"></a>5.1 配置</h4><p>使用根目录下的app.json来进行全局配置。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"pages"</span>: [</div><div class="line">    <span class="string">"pages/index/index"</span>,</div><div class="line">    <span class="string">"pages/logs/index"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"window"</span>: &#123;</div><div class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Demo"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"tabBar"</span>: &#123;</div><div class="line">    <span class="attr">"list"</span>: [&#123;</div><div class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</div><div class="line">      <span class="attr">"text"</span>: <span class="string">"首页"</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</div><div class="line">      <span class="attr">"text"</span>: <span class="string">"日志"</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"networkTimeout"</span>: &#123;</div><div class="line">    <span class="attr">"request"</span>: <span class="number">10000</span>,</div><div class="line">    <span class="attr">"downloadFile"</span>: <span class="number">10000</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面给出各个配置项的说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">必填</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pages</td>
<td style="text-align:center">String Array</td>
<td style="text-align:center">是</td>
<td style="text-align:center">设置页面路径</td>
</tr>
<tr>
<td style="text-align:center">window</td>
<td style="text-align:center">Object</td>
<td style="text-align:center">否</td>
<td style="text-align:center">设置默认页面的窗口表现</td>
</tr>
<tr>
<td style="text-align:center">tabBar</td>
<td style="text-align:center">Object</td>
<td style="text-align:center">否</td>
<td style="text-align:center">设置底部 tab 的表现</td>
</tr>
<tr>
<td style="text-align:center">networkTimeout</td>
<td style="text-align:center">Object</td>
<td style="text-align:center">否</td>
<td style="text-align:center">设置网络超时时间</td>
</tr>
<tr>
<td style="text-align:center">debug</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">否</td>
<td style="text-align:center">设置是否开启 debug 模式</td>
</tr>
</tbody>
</table>
<p>除了pages外其他几个属性都不是必须的。tabBar可以页面上方或者下方添加tab选项卡，最少2个选项卡，最多5个选项卡。每个选项的配置项都可以在<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="external"><strong> 这里 </strong></a>查到，不再赘述。</p>
<h4 id="5-2-注册APP"><a href="#5-2-注册APP" class="headerlink" title="5.2 注册APP"></a>5.2 注册APP</h4><p>微信小程序是在根目录的app.js里通过App()函数来注册小程序的。这个函数可以接收一个object参数，指定小程序的生命周期函数等。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onLaunch</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">监听小程序初始化</td>
<td style="text-align:center">当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</td>
</tr>
<tr>
<td style="text-align:center">onShow</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">监听小程序显示</td>
<td style="text-align:center">当小程序启动，或从后台进入前台显示，会触发 onShow</td>
</tr>
<tr>
<td style="text-align:center">onHide</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">监听小程序隐藏</td>
<td style="text-align:center">当小程序从前台进入后台，会触发 onHide</td>
</tr>
<tr>
<td style="text-align:center">其他</td>
<td style="text-align:center">Any</td>
<td style="text-align:center">开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<p>所以可以在这里配一些全局的静态参数什么的~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;p.s. 这篇文章是一个月之前写的，因为最近忙于其他项目，所以一直没来维护这个博客~微信小程序貌似也有了新的更新。先把这篇贴上，后续填坑23333&lt;/p&gt;
&lt;p&gt;利用周末时间基于cnode社区的api撸了一发微信小程序，记录一下。&lt;/p&gt;
&lt;h3 id=&quot;1、开发环境&quot;&gt;&lt;a href=&quot;#1、开发环境&quot; class=&quot;headerlink&quot; title=&quot;1、开发环境&quot;&gt;&lt;/a&gt;1、开发环境&lt;/h3&gt;&lt;p&gt;微信mac版开发工具0.11.112301&lt;br&gt;下载地址：&lt;a href=&quot;https://servicewechat.com/wxa-dev-logic/download_redirect?type=darwin&amp;amp;from=mpwiki&amp;amp;t=20161122&quot;&gt;使劲戳我&lt;/a&gt;&lt;br&gt;其他版本下载地址：&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161122&quot;&gt;继续戳我&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、项目创建&quot;&gt;&lt;a href=&quot;#2、项目创建&quot; class=&quot;headerlink&quot; title=&quot;2、项目创建&quot;&gt;&lt;/a&gt;2、项目创建&lt;/h3&gt;&lt;p&gt;扫码登录后按下图输入创建项目&lt;br&gt;&lt;img src=&quot;/assets/images/2016/11/27/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;创建项目后界面的样子和默认的文件目录结构&lt;br&gt;&lt;img src=&quot;/assets/images/2016/11/27/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分析下目录结构&lt;br&gt;&lt;img src=&quot;/assets/images/2016/11/27/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;code&gt;pages&lt;/code&gt;目录下有两个页面，&lt;code&gt;index&lt;/code&gt;和&lt;code&gt;logs&lt;/code&gt;。&lt;code&gt;.js&lt;/code&gt;文件是负责处理该页面的逻辑，&lt;code&gt;.wxml&lt;/code&gt;负责视图以及绑定一些交互事件，&lt;code&gt;.wxss&lt;/code&gt;来写css样式，&lt;code&gt;.json&lt;/code&gt;用来配置一些配置参数或者定义一些静态常量。&lt;br&gt;&lt;code&gt;utils&lt;/code&gt;目录下是一个工具类。根目录下的&lt;code&gt;app.js&lt;/code&gt;是小程序的入口文件，用来注册app。&lt;code&gt;app.json&lt;/code&gt;可以用来配置全局常量，&lt;code&gt;app.wxss&lt;/code&gt;用来配置项目的公用样式。&lt;/p&gt;
&lt;p&gt;初始程序提供了一个从&lt;code&gt;index&lt;/code&gt;页面到&lt;code&gt;logs&lt;/code&gt;页面的跳转&lt;br&gt;&lt;img src=&quot;/assets/images/2016/11/27/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;code&gt;index.wxml&lt;/code&gt;中绑定的&lt;code&gt;bindViewTab&lt;/code&gt;函数就是前面在&lt;code&gt;index.js&lt;/code&gt;中标出的那个函数。函数中调用微信小程序的api定义了一个跳转&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bindViewTap: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    wx.navigateTo(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;../logs/logs&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://yvshuo.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用ESLint检查语法和代码风格</title>
    <link href="http://yvshuo.github.io/2016/11/15/2016-11-15-eslint/"/>
    <id>http://yvshuo.github.io/2016/11/15/2016-11-15-eslint/</id>
    <published>2016-11-15T13:37:39.000Z</published>
    <updated>2016-11-15T15:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习ECMAScript6的过程中发现了一个代码风格和语法的检查工具，<a href="http://eslint.org/docs/user-guide/command-line-interface" target="_blank" rel="external">ESLint</a>，记录一下。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里记录的安装方法是通过npm的安装，所以前提条件是已经安装了npm。如果没有安装的话，建议直接安装nvm，可以方便的切换node的版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g eslint</div></pre></td></tr></table></figure></p>
<p>通过以上命令即可完成eslint CLI的安装。</p>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>ESLint的运行格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint [options] [file|dir|glob]*</div></pre></td></tr></table></figure></p>
<p>以下的几种方式都是可行的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eslint file1.js file2.js</div><div class="line">eslint lib/**</div><div class="line">eslint <span class="string">"lib/**"</span></div></pre></td></tr></table></figure></p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>以下的内容可以通过eslint -h来查阅<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">eslint [options] file.js [file.js] [dir]</div><div class="line">Basic configuration:</div><div class="line">  -c, --config path::String    Use configuration from this file or shareable config</div><div class="line">  --no-eslintrc                Disable use of configuration from .eslintrc</div><div class="line">  --env [String]               Specify environments</div><div class="line">  --ext [String]               Specify JavaScript file extensions - default: .js</div><div class="line">  --global [String]            Define global variables</div><div class="line">  --parser String              Specify the parser to be used</div><div class="line">  --parser-options Object      Specify parser options</div><div class="line">Caching:</div><div class="line">  --cache                      Only check changed files - default: <span class="literal">false</span></div><div class="line">  --cache-file path::String    Path to the cache file. Deprecated: use --cache-location - default: .eslintcache</div><div class="line">  --cache-location path::String  Path to the cache file or directory</div><div class="line">Specifying rules and plugins:</div><div class="line">  --rulesdir [path::String]    Use additional rules from this directory</div><div class="line">  --plugin [String]            Specify plugins</div><div class="line">  --rule Object                Specify rules</div><div class="line">Ignoring files:</div><div class="line">  --ignore-path path::String   Specify path of ignore file</div><div class="line">  --no-ignore                  Disable use of ignore files and patterns</div><div class="line">  --ignore-pattern [String]    Pattern of files to ignore (<span class="keyword">in</span> addition to those <span class="keyword">in</span> .eslintignore)</div><div class="line">Using stdin:</div><div class="line">  --stdin                      Lint code provided on &lt;STDIN&gt; - default: <span class="literal">false</span></div><div class="line">  --stdin-filename String      Specify filename to process STDIN as</div><div class="line">Handling warnings:</div><div class="line">  --quiet                      Report errors only - default: <span class="literal">false</span></div><div class="line">  --max-warnings Int           Number of warnings to trigger nonzero <span class="built_in">exit</span> code - default: -1</div><div class="line">Output:</div><div class="line">  -o, --output-file path::String  Specify file to write report to</div><div class="line">  <span class="_">-f</span>, --format String          Use a specific output format - default: stylish</div><div class="line">  --color, --no-color          Force enabling/disabling of color</div><div class="line">Miscellaneous:</div><div class="line">  --init                       Run config initialization wizard - default: <span class="literal">false</span></div><div class="line">  --fix                        Automatically fix problems</div><div class="line">  --debug                      Output debugging information</div><div class="line">  -h, --help                   Show <span class="built_in">help</span></div><div class="line">  -v, --version                Output the version number</div><div class="line">  --no-inline-config           Prevent comments from changing config or rules</div><div class="line">  --print-config path::String  Print the configuration <span class="keyword">for</span> the given file</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --ext .jsx --ext .js file.js</div><div class="line">eslint --ext .jsx,.js file.js</div></pre></td></tr></table></figure></p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li>-c,–config<br>这个选项能给ESLint指定一个附加的配置文件。<br><em>例子：</em><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint -c ~/my-eslint.json file.js</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个例子使用<code>~/my-eslint.json</code>这个配置文件。<br>还有一种是使用共享的配置。<br><em>例子：</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint -c airbnb file.js</div></pre></td></tr></table></figure></p>
<p>这个例子使用的是<code>eslint-config-airbnb</code>的配置，使用之前需要安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure></p>
<ul>
<li><p>–no-eslintrc<br>禁用<code>.eslintrc</code>和<code>package.json</code>中的配置<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --no-eslintrc file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–env<br>指定特定的环境<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --env browser,node file.js</div><div class="line">eslint --env browser --env node file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–ext<br>配置ESLint对哪些文件类型起作用<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 只对 .js2 后缀的文件类型起作用</span></div><div class="line">eslint . --ext .js2</div><div class="line"><span class="comment"># 对 .js 和 .js2 后缀的文件类型都起作用</span></div><div class="line">eslint . --ext .js --ext .js2</div><div class="line"><span class="comment"># 对 .js 和 .js2 后缀的文件类型都起作用</span></div><div class="line">eslint . --ext .js,.js2</div></pre></td></tr></table></figure>
</li>
<li><p>–ext<br>配置ESLint对哪些文件类型起作用<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 只对 .js2 后缀的文件类型起作用</span></div><div class="line">eslint . --ext .js2</div><div class="line"><span class="comment"># 对 .js 和 .js2 后缀的文件类型都起作用</span></div><div class="line">eslint . --ext .js --ext .js2</div><div class="line"><span class="comment"># 对 .js 和 .js2 后缀的文件类型都起作用</span></div><div class="line">eslint . --ext .js,.js2</div></pre></td></tr></table></figure>
</li>
<li><p>–global<br>设置全局参数<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --global require,exports:<span class="literal">true</span> file.js</div><div class="line">eslint --global require --global exports:<span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
<li><p>–global<br>设置全局参数<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --global require,exports:<span class="literal">true</span> file.js</div><div class="line">eslint --global require --global exports:<span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
<li><p>–plugin<br>设置需要载入的插件。设置前需要通过npm安装要载入的插件。<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --plugin jquery file.js</div><div class="line">eslint --plugin eslint-plugin-mocha file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–rule<br>直接设置要使用的规则。<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eslint --rule <span class="string">'quotes: [2, double]'</span></div><div class="line">eslint --rule <span class="string">'guard-for-in: 2'</span> --rule <span class="string">'brace-style: [2, 1tbs]'</span></div><div class="line">eslint --rule <span class="string">'jquery/dollar-sign: 2'</span></div></pre></td></tr></table></figure>
</li>
<li><p>–ignore-path<br>设置一个文件来代替<code>.eslintignore</code>的功能，如果不设置的话，eslint默认会使用当前工作空间的<code>.eslintignore</code><br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --ignore-path tmp/.eslintignore file.js</div><div class="line">eslint --ignore-path .gitignore file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–no-ignore<br>禁用<code>.eslintignore</code>, <code>--ignore-path</code>和<code>--ignore-pattern</code>中的例外情况<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --no-ignore file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–ignore-pattern<br>设置忽略匹配指定正则类型的文件<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --ignore-pattern <span class="string">'/lib/'</span> --ignore-pattern <span class="string">'/src/vendor/*'</span> .</div></pre></td></tr></table></figure>
</li>
<li><p>–quiet<br>禁用reporting和warning，ESlint将只通知error<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --quiet file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–max-warnings<br>设置eslint警告的临界值，在错误过多时强制eslint退出<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --max-warnings 10 file.js</div></pre></td></tr></table></figure>
</li>
<li><p>-o, –output-file<br>将report写进指定文件<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint -o ./<span class="built_in">test</span>/test.html</div></pre></td></tr></table></figure>
</li>
<li><p>-f, –format<br>指定report输出的格式，可选格式为<code>checkstyle</code>，<code>codeframe</code>，<code>compact</code>，<code>html</code>，<code>jslint-xml</code>，<code>json</code>，<code>junit</code>，<code>stylish (the default)</code>，<code>table</code>，<code>tap</code>，<code>unix</code>，<code>visualstudio</code>。<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint <span class="_">-f</span> compact file.js</div></pre></td></tr></table></figure>
</li>
<li><p>–color, –no-color<br>指定report的颜色<br><em>例子：</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eslint --color file.js | cat</div><div class="line">eslint --no-color file.js</div></pre></td></tr></table></figure>
</li>
<li><p>init<br>初始化一些基本的配置。可以帮助新用户快速配置。</p>
</li>
<li><p>-h, –help<br>获得帮助菜单</p>
</li>
<li><p>-v, –version<br>显示当前的eslint版本</p>
</li>
<li><p>–print-config<br>打印当前eslint的配置信息</p>
</li>
<li><p>在<code>.eslintignore</code>中设置忽略的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node_modules/*</div><div class="line">**/vendor/*.js</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><p>在这个例子中使用<a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb</a>的语法规则。安装Airbnb的语法规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure></p>
<p>在项目的根目录下新建一个<code>.eslintrc</code>文件，配置ESLint。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"extends"</span>: <span class="string">"eslint-config-airbnb"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>待检查的<code>index.js</code>的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unusued = <span class="string">'I have no purpose!'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> message = <span class="string">'Hello, World!'</span>;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line">greet();</div></pre></td></tr></table></figure></p>
<p>使用ESLint检查这个文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ eslint index.js</div></pre></td></tr></table></figure></p>
<p>控制台输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">index.js</div><div class="line">  1:5  error  unusued is defined but never used                 no-unused-vars</div><div class="line">  4:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line">  5:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line">✖ 3 problems (3 errors, 0 warnings)</div></pre></td></tr></table></figure></p>
<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote>
<p>1、<a href="http://eslint.org/docs/user-guide/command-line-interface" target="_blank" rel="external">ESLint Command Line Interface</a><br>2、<a href="http://es6.ruanyifeng.com/#docs/style#ESLint的使用" target="_blank" rel="external">ECMAScript 6 入门-编程风格-ESLint的使用</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习ECMAScript6的过程中发现了一个代码风格和语法的检查工具，&lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface&quot;&gt;ESLint&lt;/a&gt;，记录一下。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;这里记录的安装方法是通过npm的安装，所以前提条件是已经安装了npm。如果没有安装的话，建议直接安装nvm，可以方便的切换node的版本。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i -g eslint&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过以上命令即可完成eslint CLI的安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yvshuo.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>webpack简介</title>
    <link href="http://yvshuo.github.io/2016/10/26/2016-10-26-webpacknote/"/>
    <id>http://yvshuo.github.io/2016/10/26/2016-10-26-webpacknote/</id>
    <published>2016-10-26T15:21:48.000Z</published>
    <updated>2016-11-03T14:13:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在研究vue，顺带着研究了一下webpack。本文只是一篇简短的记录，后续会继续更新一些webpack深入的学习笔记。</p>
<h3 id="webpack概述"><a href="#webpack概述" class="headerlink" title="webpack概述"></a>webpack概述</h3><p>简单的说，webpack是一个前端的打包工具。它做的事情就是将你项目中使用的各种前端模块打包到一起，转换为合适的格式发布。通过使用webpack，可以将各种其他格式，如<code>scss</code>、<code>typescript</code>等拓展类型的语言转换为可运行的javascript。配合webpack的核心<code>loaders</code>和<code>plugins</code>，可以灵活的实现各种需求，非常的强力！<br><a id="more"></a><br>下面是一个典型的webpack的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/build"</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">"[name]-[hash].js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.json$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">"json"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, <span class="string">'css?modules!postcss'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">postcss</span>: [</div><div class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</div><div class="line">  ],</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name]-[hash].css"</span>)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就来具体解释下webpack的使用方法以及配置文件的意思。</p>
<h3 id="基于webpack项目的基本结构"><a href="#基于webpack项目的基本结构" class="headerlink" title="基于webpack项目的基本结构"></a>基于webpack项目的基本结构</h3><p>通常会包含一些子模块文件目录以及一个<code>package.json</code>和<code>webpack.config.js</code>的文件。因为webpack是运行在<code>nodejs</code>环境下的，所以<code>package.json</code>中配置项目依赖，然后在<code>webpack.config.js</code>中配置打包的一些信息。<br>在package.json中通常会在script配置项下配置webpack的不同的运行信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Cássio Zen"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;...&#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后通过<code>npm start</code>就可以运行webpack开发状态下的打包命令，通过<code>npm build</code>就可以运行webpack生产环境下的打包命令了～轻松愉快</p>
<h3 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h3><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>
<p>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>
<ul>
<li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>
<li>loader：loader的名称（必须）</li>
<li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>
<li>query：为loaders提供额外的设置选项（可选）</li>
</ul>
<p>在前面的代码中有以下一段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">    <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这句的意思就是对除掉node_modules文件夹中js文件外的所有js文件使用npm安装的<code>babel-loader</code>来进行处理。loaders为webpack提供了极其灵活的特性，可以使用丰富的第三方loaders来实现自己特定的需求。</p>
<h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>
<p>我们以HtmlWebpackPlugin插件为例来说明webpack中使用plugins的方法。这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>
<p> 1.<strong>安装</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure></p>
<p> 2.<strong>在项目的app目录下创建一个html模版，我们将其命名为index.tmpl.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> 3.<strong>更新webpack的配置文件，新建一个build文件夹用来存放最终的输出文件</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); </div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); </div><div class="line"><span class="built_in">module</span>.exports = &#123; </div><div class="line">    <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>, </div><div class="line">    <span class="attr">entry</span>: __dirname + <span class="string">"/app/main.js"</span>, </div><div class="line">    <span class="attr">output</span>: &#123; </div><div class="line">        <span class="attr">path</span>: __dirname + <span class="string">"/build"</span>, </div><div class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span> </div><div class="line">    &#125;, </div><div class="line">    <span class="attr">module</span>: &#123; </div><div class="line">        <span class="attr">loaders</span>: [ </div><div class="line">            &#123; </div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, </div><div class="line">                <span class="attr">loader</span>: <span class="string">"json"</span> </div><div class="line">            &#125;, </div><div class="line">            &#123; </div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, </div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, </div><div class="line">                <span class="attr">loader</span>: <span class="string">'babel'</span> </div><div class="line">            &#125;, </div><div class="line">            &#123; </div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </div><div class="line">                <span class="attr">loader</span>: <span class="string">'style!css?modules!postcss'</span> </div><div class="line">            &#125; </div><div class="line">            ] </div><div class="line">    &#125;, </div><div class="line">    <span class="attr">postcss</span>: [ </div><div class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>) </div><div class="line">    ], </div><div class="line">    <span class="attr">plugins</span>: [ </div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123; </div><div class="line">            <span class="attr">template</span>: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数 </span></div><div class="line">        &#125;) </div><div class="line">     ], </div><div class="line">    <span class="attr">devServer</span>: &#123; </div><div class="line">            <span class="attr">colors</span>: <span class="literal">true</span>, </div><div class="line">            <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, </div><div class="line">            <span class="attr">inline</span>: <span class="literal">true</span> </div><div class="line">     &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 4.<strong>在编译过程中，本插件就会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件</strong></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文仅仅是对webpack的主要功能做一个很简单的介绍，它丰富的特性需要在使用中逐渐体会，后续还会继续更新相关内容。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p>1、 <a href="http://www.pro-react.com/materials/appendixA/" target="_blank" rel="external">Webpack for React</a><br>2、 <a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a><br>3、 <a href="http://www.w2bc.com/Article/50764" target="_blank" rel="external">一小时包教会 —— webpack 入门指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在研究vue，顺带着研究了一下webpack。本文只是一篇简短的记录，后续会继续更新一些webpack深入的学习笔记。&lt;/p&gt;
&lt;h3 id=&quot;webpack概述&quot;&gt;&lt;a href=&quot;#webpack概述&quot; class=&quot;headerlink&quot; title=&quot;webpack概述&quot;&gt;&lt;/a&gt;webpack概述&lt;/h3&gt;&lt;p&gt;简单的说，webpack是一个前端的打包工具。它做的事情就是将你项目中使用的各种前端模块打包到一起，转换为合适的格式发布。通过使用webpack，可以将各种其他格式，如&lt;code&gt;scss&lt;/code&gt;、&lt;code&gt;typescript&lt;/code&gt;等拓展类型的语言转换为可运行的javascript。配合webpack的核心&lt;code&gt;loaders&lt;/code&gt;和&lt;code&gt;plugins&lt;/code&gt;，可以灵活的实现各种需求，非常的强力！&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://yvshuo.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>一篇关于javascript闭包的笔记</title>
    <link href="http://yvshuo.github.io/2016/10/11/2016-10-11-closure/"/>
    <id>http://yvshuo.github.io/2016/10/11/2016-10-11-closure/</id>
    <published>2016-10-11T15:21:48.000Z</published>
    <updated>2016-10-11T16:09:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天读到了一篇讲<a href="http://web.jobbole.com/88167/" target="_blank" rel="external">闭包的文章</a>，是我目前看到的最透彻的一篇闭包的讲解。趁热记一下笔记。</p>
<p>在我以前的认识中，一直觉得闭包就是在js中提供了一种类似于java中get方法的功能，使我们可以通过闭包来访问到函数体内的局部变量。然鹅，我的理解也就顶多意会了闭包的一点皮毛。下面就直接通过代码来记录一下这篇文章中写到的知识点。</p>
<h3 id="静态作用域的理解"><a href="#静态作用域的理解" class="headerlink" title="静态作用域的理解"></a>静态作用域的理解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;	</div><div class="line">  <span class="keyword">var</span> y = x + <span class="number">5</span>;	</div><div class="line">  <span class="keyword">return</span> y;	</div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; 	</div><div class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;	</div><div class="line">  <span class="keyword">return</span> foo();	</div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;	</div><div class="line">  foo(); <span class="comment">// Static scope: 15; Dynamic scope: 15	</span></div><div class="line">  bar(); <span class="comment">// Static scope: 15; Dynamic scope: 7	</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>现在大部分的程序语言都是使用的静态作用域的规则，基本就是内嵌套作用域规则。</p>
<blockquote>
<p><strong>内嵌套作用域规则：</strong><br>由一个声明引进的标识符在这个声明所在的作用域里可见，而且在其内部嵌套的每个作用域里也可见，除非它被嵌套于内部的对同名标识符的另一个声明所掩盖。为了找到某个给定的标识符所引用的对象，应该在当前最内层作用域里查找。如果找到了一个声明，也就可以找到该标识符所引用的对象。否则我们就到直接的外层作用域里去查找，并继续向外顺序地检查外层作用域，直到到达程序的最外嵌套层次，也就是全局对象声明所在的作用域。如果在所有层次上都没有找到有关声明，那么这个程序就有错误。</p>
</blockquote>
<p>所以这个程序<code>main()</code>中的<code>foo()</code>和<code>bar()</code>在js中的返回值都是15。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [];	</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;	</div><div class="line">  result[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;	</div><div class="line">    <span class="built_in">console</span>.log(i);	</div><div class="line">  &#125;;	</div><div class="line">&#125;	 	</div><div class="line">result[<span class="number">0</span>](); <span class="comment">// 5, expected 0 	</span></div><div class="line">result[<span class="number">1</span>](); <span class="comment">// 5, expected 1 	</span></div><div class="line">result[<span class="number">2</span>](); <span class="comment">// 5, expected 2 	</span></div><div class="line">result[<span class="number">3</span>](); <span class="comment">// 5, expected 3	</span></div><div class="line">result[<span class="number">4</span>](); <span class="comment">// 5, expected 4</span></div></pre></td></tr></table></figure>
<p>上面这个程序中日志输出的就都是5。</p>
<h3 id="保留外部作用域对一个变量的私有引用"><a href="#保留外部作用域对一个变量的私有引用" class="headerlink" title="保留外部作用域对一个变量的私有引用"></a>保留外部作用域对一个变量的私有引用</h3><p>这个就是我之前对闭包的理解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">secretPassword</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> password = <span class="string">'xh38sk'</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">guessPassword</span>: <span class="function"><span class="keyword">function</span>(<span class="params">guess</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (guess === password) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;	</div><div class="line">  &#125;	</div><div class="line">&#125;	</div><div class="line"><span class="keyword">var</span> passwordGame = secretPassword();</div><div class="line">passwordGame.guessPassword(<span class="string">'heyisthisit?'</span>); <span class="comment">// false	</span></div><div class="line">passwordGame.guessPassword(<span class="string">'xh38sk'</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>通过闭包，我们可以在<code>secretPassword()</code>函数的外部访问到它的私有变量<code>password</code>。</p>
<h3 id="每调用一次函数就会创建一个单独的闭包"><a href="#每调用一次函数就会创建一个单独的闭包" class="headerlink" title="每调用一次函数就会创建一个单独的闭包"></a>每调用一次函数就会创建一个单独的闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iCantThinkOfAName</span>(<span class="params">num, obj</span>) </span>&#123;	</div><div class="line">  <span class="comment">// This array variable, along with the 2 parameters passed in,	</span></div><div class="line">  <span class="comment">// are 'captured' by the nested function 'doSomething'	</span></div><div class="line">  <span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];	</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">i</span>) </span>&#123;	</div><div class="line">    num += i;	</div><div class="line">    array.push(num);	</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'num: '</span> + num);	</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'array: '</span> + array); 	</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'obj.value: '</span> + obj.value);	</div><div class="line">  &#125;	</div><div class="line">  <span class="keyword">return</span> doSomething;	</div><div class="line">&#125;	</div><div class="line"><span class="keyword">var</span> referenceObject = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;	</div><div class="line"><span class="keyword">var</span> foo = iCantThinkOfAName(<span class="number">2</span>, referenceObject); <span class="comment">// closure #1	</span></div><div class="line"><span class="keyword">var</span> bar = iCantThinkOfAName(<span class="number">6</span>, referenceObject); <span class="comment">// closure #2</span></div><div class="line">foo(<span class="number">2</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">  num: 4</div><div class="line">  array: 1,2,3,4</div><div class="line">  obj.value: 10 	</div><div class="line">*/	</div><div class="line">bar(<span class="number">2</span>);	</div><div class="line"><span class="comment">/*	</span></div><div class="line">  num: 8	</div><div class="line">  array: 1,2,3,8	</div><div class="line">  obj.value: 10	</div><div class="line">*/	</div><div class="line">referenceObject.value++;	</div><div class="line">foo(<span class="number">4</span>);	</div><div class="line"><span class="comment">/*	</span></div><div class="line">  num: 8</div><div class="line">  array: 1,2,3,4,8</div><div class="line">  obj.value: 11 	</div><div class="line">*/	</div><div class="line">bar(<span class="number">4</span>);	</div><div class="line"><span class="comment">/*	</span></div><div class="line">  num: 12	</div><div class="line">  array: 1,2,3,8,12	</div><div class="line">  obj.value: 11	</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>先得赞一下作者起的这个函数名，<code>iCantThinkOfAName</code>2333333,很喜欢这种画风。顺带提一下今天在github上看到一个开原协议，叫<a href="https://en.wikipedia.org/wiki/WTFPL" target="_blank" rel="external">WTFPL</a>,感兴趣的话可以戳一下这个协议的WIKI链接。全名叫做Do What the Fuck You Want To Public License。哈哈哈哈哈，简直笑尿。</p>
<p>呐，回到上面的程序。这里就用了闭包的一个很重要的特性，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = iCantThinkOfAName(<span class="number">2</span>, referenceObject); <span class="comment">// closure #1	</span></div><div class="line"><span class="keyword">var</span> bar = iCantThinkOfAName(<span class="number">6</span>, referenceObject); <span class="comment">// closure #2</span></div></pre></td></tr></table></figure></p>
<p>上面这两句创建了两个独立的闭包，每个闭包对<code>iCantThinkOfAName</code>函数中<code>array</code>这个私有变量都创建了一个自己独立的引用（这个概念大概不准确，但是大概可以这么类比吧→_→），而且还能保存住自己作用域中的变量，很有点新建一个对象的感觉- -<br>用作者翻译的话来说就是：</p>
<blockquote>
<p>每个函数都有一个执行上下文，它包括一个在函数中赋予变量含义的词法环境和对其父环境的引用。因为函数对环境的引用，使它看起来就像是函数“记住了”这个环境（作用域）一样。这就是一个闭包</p>
</blockquote>
<p>仿佛明白了一些了不起的道理！厉害！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天读到了一篇讲&lt;a href=&quot;http://web.jobbole.com/88167/&quot;&gt;闭包的文章&lt;/a&gt;，是我目前看到的最透彻的一篇闭包的讲解。趁热记一下笔记。&lt;/p&gt;
&lt;p&gt;在我以前的认识中，一直觉得闭包就是在js中提供了一种类似于java中get方法的功能，使我们可以通过闭包来访问到函数体内的局部变量。然鹅，我的理解也就顶多意会了闭包的一点皮毛。下面就直接通过代码来记录一下这篇文章中写到的知识点。&lt;/p&gt;
&lt;h3 id=&quot;静态作用域的理解&quot;&gt;&lt;a href=&quot;#静态作用域的理解&quot; class=&quot;headerlink&quot; title=&quot;静态作用域的理解&quot;&gt;&lt;/a&gt;静态作用域的理解&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y = x + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; y;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; 	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; foo();	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo(); &lt;span class=&quot;comment&quot;&gt;// Static scope: 15; Dynamic scope: 15	&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bar(); &lt;span class=&quot;comment&quot;&gt;// Static scope: 15; Dynamic scope: 7	&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yvshuo.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>配置hexo的一键打包部署</title>
    <link href="http://yvshuo.github.io/2016/10/07/2016-10-07-githubssh/"/>
    <id>http://yvshuo.github.io/2016/10/07/2016-10-07-githubssh/</id>
    <published>2016-10-07T04:31:27.000Z</published>
    <updated>2016-10-11T15:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天研究了一下hexo的自动打包部署，记录一下。</p>
<h2 id="配置github的ssh"><a href="#配置github的ssh" class="headerlink" title="配置github的ssh"></a>配置github的ssh</h2><h3 id="本地生成公钥"><a href="#本地生成公钥" class="headerlink" title="本地生成公钥"></a>本地生成公钥</h3><p>运行 git Bash 客户端，检查是否已经配置过SSH key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div><div class="line">$ ls</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果没有 id_rsa 和 id_rsa.pub，则需要创建一个SSH key。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"XXX@XXX.com"</span></div></pre></td></tr></table></figure>
<ul>
<li>-t 制定密钥类型，默认rsa，可以省略</li>
<li>-C 设置注释文字，通常设置自己的邮箱</li>
<li>-f 制定密钥文件存储文件名</li>
</ul>
<p>然后就会生成 id_rsa 和 id_rsa.pub 两个文件，其中 id_rsa.pub就是我们要配在github里的公钥。</p>
<h3 id="在github中配置ssh-key"><a href="#在github中配置ssh-key" class="headerlink" title="在github中配置ssh key"></a>在github中配置ssh key</h3><p>在github中找到配置项的SSH and GPG keys，然后按下图所示配置。</p>
<p><img src="/assets/images/2016/10/07/githubssh-1.png" alt=""></p>
<p>配置完成后，测试一下是否配置成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果显示以下警告：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span></div><div class="line"># RSA key fingerprint is &lt;your fingerprint&gt;.</div><div class="line"># Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p>
<p>则说明已经配置成功了，输入yes即可。</p>
<h2 id="配置hexo的自动打包部署"><a href="#配置hexo的自动打包部署" class="headerlink" title="配置hexo的自动打包部署"></a>配置hexo的自动打包部署</h2><h3 id="安装hexo-deployer-git"><a href="#安装hexo-deployer-git" class="headerlink" title="安装hexo-deployer-git"></a>安装hexo-deployer-git</h3><p>还是通过npm来安装，输入下面的命令，稍等片刻即可安装成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在根目录的_config.yml中找到以下代码段。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure></p>
<ul>
<li>repo 里配置git仓库的信息，这里我的就是git@github.com:yvshuo/yvshuo.github.io</li>
<li>branch 里配置分支名称，我的是主分支，就配置的master</li>
<li>message 是自定义提交的信息，默认为Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}，可以空着</li>
</ul>
<h3 id="自动部署提交"><a href="#自动部署提交" class="headerlink" title="自动部署提交"></a>自动部署提交</h3><p>配置完成后，剩下的就是一条命令了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --deploy</div></pre></td></tr></table></figure></p>
<p>缩写的命令也是可以的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -<span class="_">-d</span></div></pre></td></tr></table></figure></p>
<p>开开心心。。。。</p>
<h2 id="最后唠叨几句"><a href="#最后唠叨几句" class="headerlink" title="最后唠叨几句"></a>最后唠叨几句</h2><ul>
<li>记得关掉vpn代理啥的，不然ssh可能会有问题</li>
<li>发现一篇很好的介绍hexo的文章，戳<a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">Hexo在github上构建免费的Web应用</a></li>
<li>明天又要上班了，终于又可以开心的建设社会主义了。。。。。。（逃</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天研究了一下hexo的自动打包部署，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;配置github的ssh&quot;&gt;&lt;a href=&quot;#配置github的ssh&quot; class=&quot;headerlink&quot; title=&quot;配置github的ssh&quot;&gt;&lt;/a&gt;配置github的ssh&lt;/h2&gt;&lt;h3 id=&quot;本地生成公钥&quot;&gt;&lt;a href=&quot;#本地生成公钥&quot; class=&quot;headerlink&quot; title=&quot;本地生成公钥&quot;&gt;&lt;/a&gt;本地生成公钥&lt;/h3&gt;&lt;p&gt;运行 git Bash 客户端，检查是否已经配置过SSH key。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ls&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yvshuo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo在github上搭建博客的记录</title>
    <link href="http://yvshuo.github.io/2016/10/06/2016-10-06-create/"/>
    <id>http://yvshuo.github.io/2016/10/06/2016-10-06-create/</id>
    <published>2016-10-05T16:40:58.000Z</published>
    <updated>2016-10-07T14:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作已经一年了，想着该稍微停下来总结一下了。恰巧印象笔记开始限终端限流量。于是就有了写博客记录一下日常感想，同时将之前的一些笔记迁移到博客的想法。</p>
<p>在github闲逛的时候看到了<a href="https://litten.github.io/" target="_blank" rel="external">Litten</a>的博客，很是喜欢。于是发现了<a href="https://hexo.io/" target="_blank" rel="external">hexo</a>,各种特性都让我甚是喜欢，就这么对Hexo一见钟情了。在知乎上搜到了一篇介绍<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">hexo主题</a>的回答,一圈看下来，还是比较喜欢<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a>这个主题，也就是我最早看到的Litten开发的~缘分啊，（逃</p>
<p>于是果断决定使用这个主题，计划着先直接用着，后续有时间的话自己也试着DIY一下自己的主题。</p>
<p>废话不多说了，简单的记录一下第一次搭建Hexo博客的过程。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Hexo是在nodejs环境下搭建的，在npm的帮助下几行命令就轻松搞定，简直是轻松愉快。当然了，前提是已经安装好了git和nodejs。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>同样很方便，到博客的根目录下，将主题git下来。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<p>然后修改根目录下_config.yml中的配置项theme: yilia。如果server是在运行状态下，甚至都不需要重启。只需要刷新下页面，新的主题就已经换上去了。开开心心- -</p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"我的文章"</span></div></pre></td></tr></table></figure>
<p>这样就会生成一篇叫“我的文章”的文章了。默认会在_posts文件夹下新建一个对应的markdown文件“我的文章.md”，编辑这个md文件就可以写文章并发布了。格式遵循<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">md的语法</a>。</p>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>生成的静态文件在public文件夹中，这些文件就可以提交到github来搭建自己的个人博客了~简直炫酷。</p>
<h2 id="发布到github上"><a href="#发布到github上" class="headerlink" title="发布到github上"></a>发布到github上</h2><p>每个github账号下都默认有一个自己的XXX.github.io的子域名，可以部署静态代码来生成自己的网站。</p>
<p>譬如我的github账号是yvshuo,于是我要新建一个名字叫做yvshuo.github.io的项目。然后到刚才生成的public文件下将代码提交到github仓库里。如果不熟悉git操作，可以参看<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git-简明指南</a>快速入手。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> public/</div><div class="line">$ git init</div><div class="line">$ git add --all</div><div class="line">$ git commit -m <span class="string">"create"</span></div><div class="line">$ git remote add origin https://github.com/yvshuo/yvshuo.github.io.git</div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<p>然后就是享受成果的时候了~~<a href="https://yvshuo.github.io/">yvshuo</a></p>
<h2 id="一点点小补充"><a href="#一点点小补充" class="headerlink" title="一点点小补充"></a>一点点小补充</h2><ol>
<li>除了上面说的最基本的一些东西外，还有很多配置和可以自己来diy的东西。具体可参考hexo的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">中文文档</a>。再次表达对hexo的爱~</li>
<li>md编辑器可以自己在sublime text里配，也可以用专门的编辑器，如<a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a>。当然，我觉得最爽的还是在本地开着hexo server然后监听文件变动自动部署，再直接在浏览器里F5~</li>
<li>今天第一次接触hexo，还有待后续进一步发掘这个工具的强大之处</li>
</ol>
<h2 id="立FLAG"><a href="#立FLAG" class="headerlink" title="立FLAG"></a>立FLAG</h2><blockquote>
<p>要把这个博客经营下去。谢老师监督我→_→</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作已经一年了，想着该稍微停下来总结一下了。恰巧印象笔记开始限终端限流量。于是就有了写博客记录一下日常感想，同时将之前的一些笔记迁移到博客的想法。&lt;/p&gt;
&lt;p&gt;在github闲逛的时候看到了&lt;a href=&quot;https://litten.github.io/&quot;&gt;Litten&lt;/a&gt;的博客，很是喜欢。于是发现了&lt;a href=&quot;https://hexo.io/&quot;&gt;hexo&lt;/a&gt;,各种特性都让我甚是喜欢，就这么对Hexo一见钟情了。在知乎上搜到了一篇介绍&lt;a href=&quot;https://www.zhihu.com/question/24422335&quot;&gt;hexo主题&lt;/a&gt;的回答,一圈看下来，还是比较喜欢&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot;&gt;Yilia&lt;/a&gt;这个主题，也就是我最早看到的Litten开发的~缘分啊，（逃&lt;/p&gt;
&lt;p&gt;于是果断决定使用这个主题，计划着先直接用着，后续有时间的话自己也试着DIY一下自己的主题。&lt;/p&gt;
&lt;p&gt;废话不多说了，简单的记录一下第一次搭建Hexo博客的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yvshuo.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
